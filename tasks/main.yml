---
# tasks file for jenkins_server

- name: Update
  apt: update_cache=yes

- name: Add jenkins apt-key
  sudo: yes
  apt_key: url={{ jenkins_key }} state=present

- name: Add Jenkins repository
  sudo: yes
  apt_repository: repo='deb {{ jenkins_repo }}' update_cache=yes

- name: Install dependencies
  sudo: yes
  apt: name={{ item }} state=installed
  with_items:
    - jenkins
    - nginx

- name: Push jenkins conf
  copy: src=jenkins.conf dest=/etc/default/jenkins mode=0644

# If Jenkins is installed or updated, wait for pulling the Jenkins CLI
- name: "{{ startup_delay_s | default(10) }}s delay while starting Jenkins"
  wait_for: port=8080 delay={{ startup_delay_s | default(10) }}

- name: Get the jenkins-cli jarfile from the Jenkins server
  get_url: url=http://localhost:{{ jenkins_port }}/jnlpJars/jenkins-cli.jar
           dest={{ jenkins_jar_location }} owner=jenkins group=nogroup
  register: jarfile_get
  until: "'OK' in jarfile_get.msg or 'file already exists' in jarfile_get.msg"
  retries: 5
  delay: 5


#- name: get jenkins updates
#  get_url: url=http://updates.jenkins-ci.org/update-center.json dest='{{ jenkins_updates_dest }}' thirsty=yes mode=0444
#  register: jenkins_updates
#  tags: jenkinsplugins

#- name: update-center jenkins
#  shell: "cat {{ jenkins_updates_dest }} | sed '1d;$d' | curl -X POST -H 'Accept: application/json' -d @- http://localhost:{{ jenkins_port }}/updateCenter/byId/default/postBack"
#  when: jenkins_updates.changed
#  tags: jenkinsplugins

#- name: List plugins
#  shell: java -jar {{ jenkins_jar_location }} -s http://localhost:{{ jenkins_port }} list-plugins | cut -f 1 -d ' '
#  when: jenkins_plugins is defined
#  register: plugins_installed
#  tags: jenkinsplugins

#- name: Install/update plugins
#  command: java -jar {{ jenkins_jar_location }} -s http://localhost:{{ jenkins_port }} install-plugin {{ item }}
#  when: plugins_installed.changed and plugins_installed.stdout.find('{{ item }}') == -1
#  with_items: jenkins_plugins
#  notify: restart jenkins
#  tags: jenkinsplugins

#- name: List plugins to be updated
#  shell: java -jar {{ jenkins_jar_location }} -s http://localhost:{{ jenkins_port }} list-plugins | grep ')$' | cut -f 1 -d ' ' | sed ':a;N;$!ba;s/\n/ /g'
#  register: plugins_updates
#  tags: jenkinsplugins

#- name: Update plugins
#  command: java -jar {{ jenkins_jar_location }} -s http://localhost:{{ jenkins_port }} install-plugin {{ plugins_updates.stdout }}
#  when: plugins_updates.stdout != ''
#  notify: restart jenkins
#  tags: jenkinsplugins


#- name: Create Jenkins updates folder
#  file: path=/var/lib/jenkins/updates owner=jenkins group=nogroup mode=0755 state=directory

#- name: Update Jenkins plugin data
#  shell:
#    curl -L http://updates.jenkins-ci.org/update-center.json | sed '1d;$d' > /var/lib/jenkins/updates/default.json
#    creates=/var/lib/jenkins/updates/default.json

#- name: Permissions for default.json updates info
#  file: path=/var/lib/jenkins/updates/default.json owner=jenkins group=nogroup mode=0755

#- name: Install jenkins plugins
#  command: java -jar {{ jenkins_jar_location }} -s http://localhost:{{ jenkins_port }} install-plugin {{ item }} creates=/var/lib/jenkins/plugins/{{ item }}.jpi
#  with_items: jenkins_plugins
#  notify: restart jenkins

- name: Upload nginx.conf
  action: copy src=nginx.conf dest=/etc/nginx/nginx.conf

- name: Upload nginx vhost template
  template: src=jenkins_vhost.conf.j2 dest=/etc/nginx/sites-available/jenkins_vhost.conf owner=root group=root mode=0755

- name: Create the link for site enabled specific configurations
  file: path=/etc/nginx/sites-enabled/jenkins_vhost.conf state=link src=/etc/nginx/sites-available/jenkins_vhost.conf

- name: Deactivate the default nginx site
  file: path=/etc/nginx/sites-enabled/default
          state=absent
  notify: restart nginx

- name: Install plugins
  get_url: url=https://updates.jenkins-ci.org/latest/{{ item }}.hpi dest=/var/lib/jenkins/plugins
  with_items: greenballs
  notify: restart jenkins

